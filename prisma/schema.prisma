generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// -------------------- ENUMS --------------------

enum Role {
  customer
  service_provider
  local_service_manager
  admin
}

enum ProviderStatus {
  pending // ðŸ”¹ Added for onboarding stage
  active
  inactive
  banned
}

enum LSMStatus {
  active
  inactive
}

enum JobStatus {
  new // ðŸ”¹ Added for when form is first submitted
  in_progress
  completed
  cancelled
  paid // ðŸ”¹ Added per your requirement flow
  rejected_by_sp
}

enum ApprovalStatus {
  pending
  approved
  rejected
}

enum SenderType {
  customer
  service_provider
  local_service_manager
  admin
}

enum NotificationType {
  job
  payment
  message
  system
  feedback
}

enum NotificationChannel {
  in_app
  email
}

enum MessageType {
  text
  image
  document
}

enum DisputeStatus {
  pending
  resolved
}

// -------------------- USERS --------------------

model users {
  id                Int       @id @default(autoincrement())
  first_name        String
  last_name         String
  email             String    @unique
  phone_number      String
  role              Role
  password          String
  refresh_token     String?
  is_email_verified Boolean   @default(false)
  last_login        DateTime?
  profile_picture   String? // ðŸ”¹ store path instead of bytes for ease
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt

  customer              customers?
  service_provider      service_providers?
  local_service_manager local_service_managers?
  admin                 admin?
}

// -------------------- CUSTOMER --------------------

model customers {
  id               Int                @id @default(autoincrement())
  user_id          Int                @unique
  user             users              @relation(fields: [user_id], references: [id])
  address          String
  zipcode          String? // ðŸ”¹ added to filter services by area
  jobs             jobs[]
  chats            chat[]
  feedbacks        ratings_feedback[]
  service_requests service_requests[]
  created_at       DateTime           @default(now())
}

// -------------------- SERVICE PROVIDER --------------------

model service_providers {
  id                    Int                    @id @default(autoincrement())
  user_id               Int                    @unique
  user                  users                  @relation(fields: [user_id], references: [id])
  experience            Int
  description           String?
  location              String
  zipcode               String?
  rating                Decimal                @default(0.0) @db.Decimal(3, 2)
  tier                  String                 @default("Bronze")
  status                ProviderStatus         @default(pending)
  is_active             Boolean                @default(true)
  lsm_id                Int
  local_service_manager local_service_managers @relation(fields: [lsm_id], references: [id])
  total_jobs            Int                    @default(0)
  earning               Decimal                @default(0.0) @db.Decimal(10, 2)
  warnings              Int                    @default(0)
  rejection_reason      String?
  approved_at           DateTime?
  is_deleted            Boolean                @default(false)
  deleted_at            DateTime?
  created_at            DateTime               @default(now())
  updated_at            DateTime               @updatedAt

  jobs              jobs[]
  chats             chat[]
  feedbacks         ratings_feedback[]
  provider_services provider_services[]
}

// -------------------- LOCAL SERVICE MANAGER --------------------

model local_service_managers {
  id                 Int                 @id @default(autoincrement())
  user_id            Int                 @unique
  user               users               @relation(fields: [user_id], references: [id])
  region             String
  status             LSMStatus           @default(active)
  closed_deals_count Int?                @default(0)
  earnings           Decimal?            @default(0.00) @db.Decimal(10, 2)
  service_providers  service_providers[]
  chats              chat[]
  created_at         DateTime            @default(now())
  updated_at         DateTime            @updatedAt
}

// -------------------- ADMIN --------------------

model admin {
  id         Int      @id @default(autoincrement())
  user_id    Int      @unique
  user       users    @relation(fields: [user_id], references: [id])
  created_at DateTime @default(now())
}

// -------------------- SERVICES --------------------

model services {
  id             Int            @id @default(autoincrement())
  name           String
  description    String?
  category       String
  questions_json Json?
  status         ApprovalStatus @default(approved) // ðŸ”¹ Pre-created services are approved
  is_popular     Boolean        @default(false)
  created_at     DateTime       @default(now())
  updated_at     DateTime       @updatedAt

  provider_services provider_services[]
  jobs              jobs[]
  search_logs       service_search_logs[]
}

// -------------------- JOBS --------------------

model jobs {
  id                Int               @id @default(autoincrement())
  customer_id       Int
  customer          customers         @relation(fields: [customer_id], references: [id])
  provider_id       Int
  service_provider  service_providers @relation(fields: [provider_id], references: [id])
  service_id        Int
  service           services          @relation(fields: [service_id], references: [id])
  status            JobStatus         @default(new)
  description       String?
  price             Decimal           @default(0.00) @db.Decimal(10, 2)
  location          String
  answers_json      Json? // ðŸ”¹ dynamic form answers
  pending_approval  Boolean           @default(false)
  response_deadline DateTime?
  rejection_reason  String?
  scheduled_at      DateTime?
  completed_at      DateTime?
  paid_at           DateTime?
  created_at        DateTime          @default(now())
  updated_at        DateTime          @updatedAt

  chats     chat[]
  feedbacks ratings_feedback[]
  disputes  disputes[]
}

// -------------------- CHAT + MESSAGE --------------------

model chat {
  id                    String                  @id @default(uuid()) @db.Uuid
  job_id                Int?
  job                   jobs?                   @relation(fields: [job_id], references: [id])
  customer_id           Int
  customer              customers               @relation(fields: [customer_id], references: [id])
  provider_id           Int
  service_provider      service_providers       @relation(fields: [provider_id], references: [id])
  lsm_id                Int?
  local_service_manager local_service_managers? @relation(fields: [lsm_id], references: [id])
  is_active             Boolean                 @default(true)
  is_deleted            Boolean                 @default(false)
  deleted_at            DateTime?
  deleted_by            Int?
  created_at            DateTime                @default(now())
  messages              messages[]
  disputes              disputes[]
}

model messages {
  id           String      @id @default(uuid()) @db.Uuid
  chat_id      String      @db.Uuid
  chat         chat        @relation(fields: [chat_id], references: [id])
  sender_type  SenderType
  sender_id    Int
  message_type MessageType @default(text)
  message      String?
  created_at   DateTime    @default(now())
}

// -------------------- RATINGS + FEEDBACK --------------------

model ratings_feedback {
  id                 Int               @id @default(autoincrement())
  job_id             Int
  job                jobs              @relation(fields: [job_id], references: [id])
  customer_id        Int
  customer           customers         @relation(fields: [customer_id], references: [id])
  provider_id        Int
  provider           service_providers @relation(fields: [provider_id], references: [id])
  rating             Int?              @default(0)
  feedback           String?
  punctuality_rating Int?              @default(0)
  response_time      Int?              @default(0)
  created_at         DateTime          @default(now())
}

// -------------------- NOTIFICATIONS --------------------

model notifications {
  id             String              @id @default(uuid()) @db.Uuid
  recipient_type SenderType
  recipient_id   Int
  type           NotificationType
  title          String
  message        String
  channel        NotificationChannel
  is_read        Boolean             @default(false) // ðŸ”¹ for tracking
  created_at     DateTime            @default(now())
}

// -------------------- DISPUTES --------------------

model disputes {
  id               Int           @id @default(autoincrement())
  job_id           Int
  job              jobs          @relation(fields: [job_id], references: [id])
  chat_id          String        @db.Uuid
  chat             chat          @relation(fields: [chat_id], references: [id])
  raised_by_id     Int
  raised_by_type   SenderType
  description      String
  attachments      String[]
  status           DisputeStatus @default(pending)
  resolved_by      Int?
  resolution_notes String?
  created_at       DateTime      @default(now())
  resolved_at      DateTime?
}

// -------------------- SERVICE SEARCH LOGS --------------------

model service_search_logs {
  id          Int      @id @default(autoincrement())
  service_id  Int
  service     services @relation(fields: [service_id], references: [id])
  region      String
  zipcode     String?
  searched_at DateTime @default(now())

  @@index([service_id, region, searched_at])
}

// -------------------- SERVICE REQUESTS --------------------

model service_requests {
  id          Int        @id @default(autoincrement())
  keyword     String
  zipcode     String?
  region      String?
  customer_id Int?
  customer    customers? @relation(fields: [customer_id], references: [id])
  email_sent  Boolean    @default(false)
  reviewed    Boolean    @default(false)
  created_at  DateTime   @default(now())
}

// -------------------- PROVIDER SERVICES (JUNCTION TABLE) --------------------

model provider_services {
  id          Int               @id @default(autoincrement())
  provider_id Int
  provider    service_providers @relation(fields: [provider_id], references: [id])
  service_id  Int
  service     services          @relation(fields: [service_id], references: [id])
  is_active   Boolean           @default(true)
  created_at  DateTime          @default(now())

  @@unique([provider_id, service_id])
}
