generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id                    Int                     @id @default(autoincrement())
  first_name            String
  last_name             String
  email                 String                  @unique
  phone_number          String
  role                  Role
  password              String
  refresh_token         String?
  is_email_verified     Boolean                 @default(false)
  last_login            DateTime?
  profile_picture       String?
  created_at            DateTime                @default(now())
  updated_at            DateTime                @updatedAt
  admin                 admin?
  customer              customers?
  local_service_manager local_service_managers?
  service_provider      service_providers?
}

model customers {
  id               Int                @id @default(autoincrement())
  user_id          Int                @unique
  address          String
  zipcode          String?
  city             String?
  state            String?
  created_at       DateTime           @default(now())
  region           String
  status           CustomerStatus     @default(active)
  ban_reason       String?
  banned_at        DateTime?
  chats            chat[]
  user             users              @relation(fields: [user_id], references: [id])
  jobs             jobs[]
  feedbacks        ratings_feedback[]
  service_requests service_requests[]
}

model service_providers {
  id                    Int                      @id @default(autoincrement())
  user_id               Int                      @unique
  experience            Int
  description           String?
  location              String
  city                  String?
  state                 String?
  zipcode               String?
  rating                Decimal                  @default(0.0) @db.Decimal(3, 2)
  tier                  String                   @default("Bronze")
  status                ProviderStatus           @default(pending)
  is_active             Boolean                  @default(true)
  lsm_id                Int
  total_jobs            Int                      @default(0)
  earning               Decimal                  @default(0.0) @db.Decimal(10, 2)
  created_at            DateTime                 @default(now())
  updated_at            DateTime                 @updatedAt
  approved_at           DateTime?
  deleted_at            DateTime?
  is_deleted            Boolean                  @default(false)
  rejection_reason      String?
  warnings              Int                      @default(0)
  business_name         String?
  experience_level      String?
  max_price             Decimal?                 @db.Decimal(10, 2)
  min_price             Decimal?                 @db.Decimal(10, 2)
  terms_accepted_at     DateTime?
  chats                 chat[]
  jobs                  jobs[]
  documents             provider_documents[]
  service_areas         provider_service_areas[]
  provider_services     provider_services[]
  feedbacks             ratings_feedback[]
  local_service_manager local_service_managers   @relation(fields: [lsm_id], references: [id])
  user                  users                    @relation(fields: [user_id], references: [id])
  service_requests      service_requests[]
  ban_requests          ban_requests[]
}

model local_service_managers {
  id                 Int                 @id @default(autoincrement())
  user_id            Int                 @unique
  region             String
  area               String? // Specific area within region (e.g., "North Dallas", "Houston Central")
  status             LSMStatus           @default(active)
  closed_deals_count Int?                @default(0)
  earnings           Decimal?            @default(0.00) @db.Decimal(10, 2)
  created_at         DateTime            @default(now())
  updated_at         DateTime            @updatedAt
  chats              chat[]
  user               users               @relation(fields: [user_id], references: [id])
  service_providers  service_providers[]
}

model admin {
  id         Int      @id @default(autoincrement())
  user_id    Int      @unique
  created_at DateTime @default(now())
  user       users    @relation(fields: [user_id], references: [id])
}

model services {
  id                Int                   @id @default(autoincrement())
  name              String
  description       String?
  category          String
  status            ApprovalStatus        @default(approved)
  is_popular        Boolean               @default(false)
  questions_json    Json?
  created_at        DateTime              @default(now())
  updated_at        DateTime              @updatedAt
  jobs              jobs[]
  provider_services provider_services[]
  service_requests  service_requests[]
  search_logs       service_search_logs[]

  @@index([status])
  @@index([category])
  @@index([name])
}

model jobs {
  id                Int                @id @default(autoincrement())
  customer_id       Int
  provider_id       Int
  service_id        Int
  status            JobStatus          @default(new)
  description       String?
  price             Decimal            @default(0.00) @db.Decimal(10, 2)
  location          String
  answers_json      Json? // Original customer answers
  edited_answers    Json? // SP's negotiated changes
  sp_accepted       Boolean            @default(false) // SP accepted (before customer closes deal)
  scheduled_at      DateTime?
  completed_at      DateTime?
  created_at        DateTime           @default(now())
  updated_at        DateTime           @updatedAt
  paid_at           DateTime? // Kept for backward compatibility
  pending_approval  Boolean            @default(false)
  rejection_reason  String?
  response_deadline DateTime?
  chats             chat[]
  disputes          disputes[] // One job can have multiple disputes
  payment           payments? // One-to-one payment tracking
  customer          customers          @relation(fields: [customer_id], references: [id])
  service_provider  service_providers  @relation(fields: [provider_id], references: [id])
  service           services           @relation(fields: [service_id], references: [id])
  feedbacks         ratings_feedback[]
}

model chat {
  id                    String                  @id @default(uuid()) @db.Uuid
  job_id                Int?
  customer_id           Int
  provider_id           Int
  lsm_id                Int?
  is_active             Boolean                 @default(true)
  created_at            DateTime                @default(now())
  deleted_at            DateTime?
  deleted_by            Int?
  is_deleted            Boolean                 @default(false)
  lsm_invited           Boolean                 @default(false) // Dispute filed, LSM invited to join
  lsm_joined            Boolean                 @default(false) // LSM accepted and joined chat
  lsm_joined_at         DateTime? // When LSM joined
  customer              customers               @relation(fields: [customer_id], references: [id])
  job                   jobs?                   @relation(fields: [job_id], references: [id])
  local_service_manager local_service_managers? @relation(fields: [lsm_id], references: [id])
  service_provider      service_providers       @relation(fields: [provider_id], references: [id])
  messages              messages[]
}

model messages {
  id           String      @id @default(uuid()) @db.Uuid
  chat_id      String      @db.Uuid
  sender_type  SenderType
  sender_id    Int
  message_type MessageType @default(text)
  message      String?
  created_at   DateTime    @default(now())
  chat         chat        @relation(fields: [chat_id], references: [id])
}

model payments {
  id         Int           @id @default(autoincrement())
  job_id     Int           @unique // One payment per job
  job        jobs          @relation(fields: [job_id], references: [id])
  amount     Decimal       @default(0.00) @db.Decimal(10, 2)
  method     String? // cash, card, bank_transfer, online
  status     PaymentStatus @default(pending)
  marked_by  Int? // SP user_id who marked payment received
  marked_at  DateTime? // When payment was marked received
  notes      String? // SP notes about payment
  created_at DateTime      @default(now())
  updated_at DateTime      @updatedAt

  @@index([job_id])
  @@index([status])
}

model ratings_feedback {
  id                 Int               @id @default(autoincrement())
  job_id             Int
  customer_id        Int
  rating             Int?              @default(0)
  feedback           String?
  punctuality_rating Int?              @default(0)
  response_time      Int?              @default(0)
  created_at         DateTime          @default(now())
  provider_id        Int
  customer           customers         @relation(fields: [customer_id], references: [id])
  job                jobs              @relation(fields: [job_id], references: [id])
  provider           service_providers @relation(fields: [provider_id], references: [id])
}

model notifications {
  id             String           @id @default(uuid()) @db.Uuid
  recipient_type SenderType
  recipient_id   Int
  type           NotificationType
  title          String
  message        String
  is_read        Boolean          @default(false)
  created_at     DateTime         @default(now())
}

model disputes {
  id             Int           @id @default(autoincrement())
  job_id         Int // Removed @unique to allow multiple disputes per job
  raised_by_type SenderType
  status         DisputeStatus @default(pending)
  resolved_by    Int?
  resolved_at    DateTime?
  created_at     DateTime      @default(now())
  job            jobs          @relation(fields: [job_id], references: [id])

  @@index([job_id])
}

model service_search_logs {
  id          Int      @id @default(autoincrement())
  service_id  Int
  region      String
  zipcode     String?
  searched_at DateTime @default(now())
  service     services @relation(fields: [service_id], references: [id])

  @@index([service_id, region, searched_at])
}

model service_requests {
  id                     Int               @id @default(autoincrement())
  keyword                String?
  zipcode                String?
  region                 String?
  area                   String? // Specific area within region for LSM filtering
  email_sent             Boolean           @default(false)
  reviewed               Boolean           @default(false)
  created_at             DateTime          @default(now())
  admin_approved         Boolean           @default(false)
  admin_rejection_reason String?
  admin_reviewed_at      DateTime?
  admin_reviewed_by      Int?
  category               String
  created_service_id     Int?
  customersId            Int?
  description            String?
  final_status           ApprovalStatus    @default(pending)
  lsm_approved           Boolean           @default(false)
  lsm_rejection_reason   String?
  lsm_reviewed_at        DateTime?
  lsm_reviewed_by        Int?
  provider_id            Int
  questions_json         Json?
  service_name           String
  updated_at             DateTime          @updatedAt
  created_service        services?         @relation(fields: [created_service_id], references: [id])
  customers              customers?        @relation(fields: [customersId], references: [id])
  provider               service_providers @relation(fields: [provider_id], references: [id])

  @@index([provider_id])
  @@index([final_status])
}

model provider_services {
  id          Int               @id @default(autoincrement())
  provider_id Int
  service_id  Int
  is_active   Boolean           @default(true)
  created_at  DateTime          @default(now())
  provider    service_providers @relation(fields: [provider_id], references: [id])
  service     services          @relation(fields: [service_id], references: [id])

  @@unique([provider_id, service_id])
}

model provider_service_areas {
  id          Int               @id @default(autoincrement())
  provider_id Int
  zipcode     String
  is_primary  Boolean           @default(false)
  created_at  DateTime          @default(now())
  provider    service_providers @relation(fields: [provider_id], references: [id], onDelete: Cascade)

  @@unique([provider_id, zipcode])
  @@index([zipcode])
  @@index([provider_id])
}

model provider_documents {
  id          Int               @id @default(autoincrement())
  provider_id Int
  file_name   String
  file_path   String
  file_type   String
  file_size   Int
  description String
  status      DocumentStatus    @default(pending)
  verified_by Int?
  verified_at DateTime?
  created_at  DateTime          @default(now())
  updated_at  DateTime          @updatedAt
  provider    service_providers @relation(fields: [provider_id], references: [id], onDelete: Cascade)

  @@index([provider_id])
}

model ban_requests {
  id                Int               @id @default(autoincrement())
  provider_id       Int
  provider          service_providers @relation(fields: [provider_id], references: [id])
  requested_by_lsm  Int // LSM user_id who requested the ban
  reason            String // Why LSM wants this provider banned
  status            String            @default("pending") // pending, approved, rejected
  admin_reviewed_by Int? // Admin user_id who reviewed
  admin_reviewed_at DateTime?
  admin_notes       String? // Admin's decision notes
  created_at        DateTime          @default(now())

  @@index([provider_id])
  @@index([status])
}

enum Role {
  customer
  service_provider
  local_service_manager
  admin
}

enum ProviderStatus {
  pending
  active
  inactive
  banned
  rejected
}

enum DocumentStatus {
  pending
  verified
  rejected
}

enum LSMStatus {
  active
  inactive
}

enum JobStatus {
  new
  in_progress
  completed
  cancelled
  paid
  rejected_by_sp
}

enum ApprovalStatus {
  pending
  approved
  rejected
}

enum SenderType {
  customer
  service_provider
  local_service_manager
  admin
}

enum NotificationType {
  job
  payment
  message
  system
  feedback
}

enum MessageType {
  text
  image
  document
}

enum DisputeStatus {
  pending
  resolved
}

enum CustomerStatus {
  active
  banned
  suspended
}

enum PaymentStatus {
  pending
  received
  disputed
}

model platform_settings {
  id                           Int      @id @default(autoincrement())
  response_deadline_mins       Int      @default(60)
  warning_threshold            Int      @default(3)
  popularity_threshold         Int      @default(10)
  cancellation_fee_percentage  Decimal  @default(25) @db.Decimal(5, 2)
  default_in_person_visit_cost Decimal  @default(50.00) @db.Decimal(10, 2)
  updated_by                   Int
  updated_at                   DateTime @updatedAt
  created_at                   DateTime @default(now())

  @@index([created_at])
}
